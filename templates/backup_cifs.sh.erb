#!/bin/bash
# <%= @name %> backup Manage by Puppet from corp104_backup
#
# provisioner: cifs

# INFO
HOSTNAME=$(hostname)
IP=$(/opt/puppetlabs/bin/facter networking.ip)

# CIFS Setting
SERVER='<%= @server %>'
SERVER_TARGET='<%= @server_target %>'
<% if @auth_user -%>
AUTH_USER='<%= @auth_user %>'
<% end -%>
<% if @auth_pass -%>
AUTH_PASS='<%= @auth_pass %>'
<% end -%>

# Backup Setting
SAVE_DAY=<%= @save_day %>
LOCAL_TARGET='<%= @local_target %>'
BACKUP_LIST=(
<%- @backup_list.each do |backups| -%>
 <%= backups %>
<%- end -%>
)

EXCLUDE_LIST=(
<%- @exclude_list.each do |excludes| -%>
 --exclude='<%= excludes -%>'
<%- end -%>
)

LOG_DIR='<%= @log_dir %>'
LOG="${LOG_DIR}/backup-<%= @name %>.log"
TMP_DIR='<%= @tmp_dir %>'
BACKUP_TMP_DIR="<%= @tmp_backup_dir %>-$(date +%Y-%m-%d)"
<% if @http_proxy -%>
HTTP_PROXY='<%= @http_proxy %>'
<% end -%>

<% if @slack -%>
# Slack Setting
SLACK=true
SLACK_CHANNEL='<%= @slack['channel'] %>'
SLACK_WEBHOOK='<%= @slack['webhook'] %>'
<% end -%>


logFormat() {
  STATUS=$1
  shift
  if [ $STATUS == 'warn' ]; then
    echo "$(date "+%Y-%m-%d %H:%M:%S")-[Warn]-[${HOSTNAME}(${IP})]: $@" >> $LOG
    if [ "$SLACK" = true ]; then
      notification "slack" "[Warn]-[${HOSTNAME}(${IP})]: $@ you can see backup log $LOG"
    fi
  elif [ $STATUS == 'info' ]; then
    echo "$(date "+%Y-%m-%d %H:%M:%S")-[Info]-[${HOSTNAME}(${IP})]: $@" >> $LOG
  elif [ $STATUS == 'error' ]; then
    echo "$(date "+%Y-%m-%d %H:%M:%S")-[Error]-[${HOSTNAME}(${IP})]: $@" >> $LOG
    if [ "$SLACK" = true ]; then
      notification "slack" "[Error]-[${HOSTNAME}(${IP})]: $@ you can see backup log $LOG"
      exit 1
    fi
  fi
}

notification() {
  NOTIFY_TYPE=$1
  shift
  MESSAGE=$@
  if [ $NOTIFY_TYPE == 'slack' ]; then
    if [ -z $HTTP_PROXY ]; then
      curl -s -d "payload={\"channel\": \"${SLACK_CHANNEL}\", \"text\": \"${MESSAGE}\"}" $SLACK_WEBHOOK
    else
      curl -x $HTTP_PROXY -s -d "payload={\"channel\": \"${SLACK_CHANNEL}\", \"text\": \"${MESSAGE}\"}" $SLACK_WEBHOOK
    fi
  fi
}

checkInitial() {
  # check backup log dir
  if [ ! -d $LOG_DIR ]; then
    mkdir -p $LOG_DIR
  fi

  # check local mount point.
  if [ ! -d $LOCAL_TARGET ]; then
    logFormat "info" "Initial local mount point $LOCAL_TARGET"
    mkdir -p $LOCAL_TARGET
  fi
}

mountSet() {
  ACTION=$1
  if [ $ACTION == 'up' ]; then
    logFormat "info" "mount device $LOCAL_TARGET to //${SERVER}${SERVER_TARGET} ..."
    if [ -z $AUTH_USER ] && [ -z $AUTH_PASS]; then
      /bin/mount -t cifs //${SERVER}${SERVER_TARGET} $LOCAL_TARGET

      if [ $? -eq 0 ]; then
        logFormat "info" "mount cifs device OK !!"
      else
        logFormat "error" "mount cifs device fail !!"
      fi
    else
      /bin/mount -t cifs -o username="${AUTH_USER}",password="${AUTH_PASS}" //${SERVER}${SERVER_TARGET} $LOCAL_TARGET

      if [ $? -eq 0 ]; then
        logFormat "info" "mount cifs device OK !!"
      else
        logFormat "error" "mount cifs device fail !!"
      fi
    fi
  elif [ $ACTION == 'down' ]; then
    logFormat "info" "umount device $LOCAL_TARGET ..."
    /bin/umount $LOCAL_TARGET
    if [ $? -eq 0 ]; then
      logFormat "info" "umount device $LOCAL_TARGET OK !!"
    else
      logFormat "error" "umount device $LOCAL_TARGET fail !!"
    fi
  fi
}

backupWork() {
  for (( i = 0; i < ${#BACKUP_LIST[@]}; i++ )); do

    if [ -d ${BACKUP_LIST[i]} ] || [ -e ${BACKUP_LIST[i]} ]; then
      logFormat "info" "[${BACKUP_LIST[i]}]: Sync to ${TMP_DIR}/${BACKUP_TMP_DIR} ..."

      /usr/bin/rsync -aqRL ${EXCLUDE_LIST[@]} ${BACKUP_LIST[i]} ${TMP_DIR}/$BACKUP_TMP_DIR/

      diff ${BACKUP_LIST[i]} ${TMP_DIR}/${BACKUP_TMP_DIR}${BACKUP_LIST[i]}

      if [ $? -eq 0 ]; then
        logFormat "info" "[${BACKUP_LIST[i]}]: verify sync OK !!"
      else
        logFormat "error" "[${BACKUP_LIST[i]}]: verify content fail !!"
      fi
    fi

  done
}

backupCompression() {
  if [ ! -d ${LOCAL_TARGET}/${HOSTNAME} ]; then
    mkdir -p ${LOCAL_TARGET}/${HOSTNAME}
  fi
  
  # Compression backup
  logFormat "info" "Compression to ${HOSTNAME}_$(date "+%Y-%m-%d").tar.gz ..."
  cd ${TMP_DIR}; tar zcvf ${LOCAL_TARGET}/${HOSTNAME}/${HOSTNAME}_$(date "+%Y-%m-%d").tar.gz $BACKUP_TMP_DIR
  if [ $? -eq 0 ]; then
    logFormat "info" "Compression OK !!"
    test -d ${TMP_DIR}/${BACKUP_TMP_DIR} && rm -rf ${TMP_DIR}/${BACKUP_TMP_DIR}
  else
    logFormat "error" "Compression fail !!"
  fi

  # Delete expired backup
  find ${LOCAL_TARGET}/${HOSTNAME}/ -name "*.tar.gz" -mtime +$SAVE_DAY -type f -delete
}


checkInitial
mountSet up
backupWork
backupCompression
mountSet down
